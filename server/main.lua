-- Kh·ªüi t·∫°o ESX v√† bi·∫øn to√†n c·ª•c
ESX = exports['es_extended']:getSharedObject()
local totalPool = 0
local lastDrawTime = 0

-- H√†m ki·ªÉm tra quy·ªÅn admin
local function isAdmin(source)
    local xPlayer = ESX.GetPlayerFromId(source)
    return xPlayer and xPlayer.getGroup() == "admin"
end

-- G·ª≠i th√¥ng b√°o Discord cho k·∫øt qu·∫£ x·ªï s·ªë
local function SendResultToDiscord(winningNumber, prizePool, winnerCount, drawTime, jackpot)
    if Config.ResultWebhookURL and Config.ResultWebhookURL ~= 'YOUR_DISCORD_WEBHOOK_URL_HERE' then
        local embed = {
            {
                color = 65280,
                title = "üéâ K·∫øt Qu·∫£ X·ªï S·ªë üéâ",
                description = "K·ª≥ x·ªï s·ªë v·ª´a k·∫øt th√∫c!",
                thumbnail = {url = "https://media.discordapp.net/attachments/1259110783711842324/1344135691759779862/logo5.png?ex=67ed4b29&is=67ebf9a9&hm=18072fd5a833e4ca40990d73335cba51197fd26bb487845762f1a163f3d013b4&=&format=webp&quality=lossless&width=544&height=544"},
                fields = {
                    {name = "S·ªë tr√∫ng th∆∞·ªüng", value = "**" .. winningNumber .. "**", inline = true},
                    {name = "T·ªïng gi·∫£i th∆∞·ªüng", value = "**" .. prizePool .. "$**", inline = true},
                    {name = "Ng∆∞·ªùi tr√∫ng", value = "**" .. winnerCount .. "**", inline = true},
                    {name = "Jackpot hi·ªán t·∫°i", value = "**" .. jackpot .. "$**", inline = true}
                },
                timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ"),
                footer = {text = "Lottery Feinix City"}
            }
        }
        PerformHttpRequest(Config.ResultWebhookURL, function(err, text, headers) end, 'POST', json.encode({embeds = embed}), { ['Content-Type'] = 'application/json' })
    end
end

-- G·ª≠i th√¥ng b√°o Discord cho h√†nh ƒë·ªông ng∆∞·ªùi ch∆°i
local function SendPlayerActionToDiscord(playerName, playerId, action)
    if Config.PlayerActionWebhookURL and Config.PlayerActionWebhookURL ~= 'YOUR_DISCORD_WEBHOOK_URL_HERE' then
        local embed = {
            {
                color = 16776960,
                title = "üìã H√†nh ƒê·ªông Ng∆∞·ªùi Ch∆°i",
                description = action,
                fields = {
                    {name = "Ng∆∞·ªùi ch∆°i", value = "**" .. playerName .. "** (ID: " .. playerId .. ")", inline = true}
                },
                timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ"),
                footer = {text = "Admin Log - Simple Lottery"}
            }
        }
        PerformHttpRequest(Config.PlayerActionWebhookURL, function(err, text, headers) end, 'POST', json.encode({embeds = embed}), { ['Content-Type'] = 'application/json' })
    end
end

-- Ghi log v√†o MySQL
local function LogActivity(message)
    MySQL.insert('INSERT INTO lottery_logs (message, date) VALUES (?, NOW())', {message})
    print("[Lottery Log] " .. message)
end

-- L∆∞u tr·∫°ng th√°i v√†o MySQL
local function SaveState(drawTime)
    MySQL.query('INSERT INTO lottery_state (id, last_draw_time, total_pool) VALUES (1, FROM_UNIXTIME(?), ?) ON DUPLICATE KEY UPDATE last_draw_time = FROM_UNIXTIME(?), total_pool = ?', {
        drawTime, totalPool, drawTime, totalPool
    })
end

-- T·∫£i tr·∫°ng th√°i t·ª´ MySQL khi kh·ªüi ƒë·ªông
AddEventHandler('onResourceStart', function(resourceName)
    if GetCurrentResourceName() ~= resourceName then return end
    local currentTime = os.time() -- L·∫•y th·ªùi gian th·ª±c t·ª´ VPS
    local result = MySQL.single.await('SELECT last_draw_time, total_pool FROM lottery_state WHERE id = 1')
    lastDrawTime = result and result.last_draw_time or currentTime
    totalPool = result and result.total_pool or 0

    -- Ki·ªÉm tra n·∫øu lastDrawTime kh√¥ng h·ª£p l·ªá (trong t∆∞∆°ng lai xa), reset v·ªÅ currentTime
    if lastDrawTime > currentTime + 3600 then
        lastDrawTime = currentTime
        SaveState(lastDrawTime)
        print("[Lottery] Reset lastDrawTime do gi√° tr·ªã kh√¥ng h·ª£p l·ªá: " .. os.date("%d/%m/%Y - %H:%M:%S", lastDrawTime))
    end

    print("[Lottery] Initialized lastDrawTime: " .. os.date("%d/%m/%Y - %H:%M:%S", lastDrawTime) .. ", totalPool: " .. totalPool)
end)

-- G·ª≠i jackpot v√† th·ªùi gian quay s·ªë ti·∫øp theo v·ªÅ client
RegisterNetEvent('lottery:getJackpot', function()
    local src = source
    local currentTime = os.time()
    local currentDate = os.date("*t", currentTime)
    local nextDrawHour = currentDate.hour + 1 -- L·∫•y gi·ªù ti·∫øp theo
    local nextDrawTime = string.format("%02d:%02d:%02d", nextDrawHour % 24, 0, 0) -- ƒê·∫∑t ph√∫t v√† gi√¢y v·ªÅ 00
    TriggerClientEvent('lottery:receiveJackpot', src, totalPool, nextDrawTime)
end)

-- Mua v√© s·ªë
RegisterNetEvent('lottery:buyTicket', function()
    local src = source
    local xPlayer = ESX.GetPlayerFromId(src)
    if not xPlayer then return end

    local currentTime = os.time() -- L·∫•y th·ªùi gian th·ª±c t·ª´ VPS
    local currentMinute = tonumber(os.date("%M", currentTime))

    -- Kh√≥a mua v√© t·ª´ ph√∫t 50 tr·ªü ƒëi
    if currentMinute >= 50 then
        TriggerClientEvent('lottery:buyLocked', src)
        return
    end

    local ticketCount = MySQL.scalar.await('SELECT COUNT(*) FROM lottery_tickets WHERE identifier = ?', {xPlayer.identifier})
    if ticketCount >= Config.MaxTicketsPerPlayer then
        lib.notify(src, {
            title = "X·ªï s·ªë",
            description = "B·∫°n ƒë√£ mua t·ªëi ƒëa 2 v√© cho k·ª≥ n√†y!",
            type = "error",
            position = "center-left",
            duration = Config.NotifyDuration
        })
        return
    end

    if xPlayer.getMoney() >= Config.TicketPrice then
        xPlayer.removeMoney(Config.TicketPrice)
        local ticketNumber = math.random(0, 99)
        local formattedNumber = string.format("%02d", ticketNumber)
        local purchaseTime = currentTime

        MySQL.insert('INSERT INTO lottery_tickets (identifier, number, date) VALUES (?, ?, FROM_UNIXTIME(?))', {
            xPlayer.identifier, formattedNumber, purchaseTime
        })

        totalPool = totalPool + Config.TicketPrice
        SaveState(lastDrawTime)
        lib.notify(src, {
            title = "X·ªï s·ªë",
            description = "B·∫°n ƒë√£ mua v√© s·ªë: " .. formattedNumber,
            type = "success",
            position = "center-left",
            duration = Config.NotifyDuration
        })
        LogActivity("Ng∆∞·ªùi ch∆°i " .. xPlayer.getName() .. " (ID: " .. src .. ") ƒë√£ mua v√© s·ªë: " .. formattedNumber)
        SendPlayerActionToDiscord(xPlayer.getName(), src, "Mua v√© s·ªë: " .. formattedNumber)
        -- Th√¥ng b√°o cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i khi Jackpot tƒÉng
        TriggerClientEvent('lottery:jackpotUpdated', -1, totalPool)
    else
        lib.notify(src, {
            title = "X·ªï s·ªë",
            description = "B·∫°n kh√¥ng ƒë·ªß ti·ªÅn m·∫∑t!",
            type = "error",
            position = "center-left",
            duration = Config.NotifyDuration
        })
    end
end)

-- Xem v√© ƒë√£ mua
RegisterNetEvent('lottery:checkTickets', function()
    local src = source
    local xPlayer = ESX.GetPlayerFromId(src)
    if not xPlayer then return end

    local tickets = MySQL.query.await('SELECT number, DATE_FORMAT(date, "%d/%m/%Y") as date FROM lottery_tickets WHERE identifier = ?', {xPlayer.identifier})
    TriggerClientEvent('lottery:showTickets', src, tickets)
end)

-- Ki·ªÉm tra th·ªùi gian th·ª±c v√† quay s·ªë khi ph√∫t = 00
Citizen.CreateThread(function()
    local lastDrawHour = -1
    local notifiedMinutes = {} -- L∆∞u tr·∫°ng th√°i th√¥ng b√°o cho t·ª´ng ph√∫t

    while true do
        Wait(100) -- Ki·ªÉm tra m·ªói 100ms ƒë·ªÉ ch√≠nh x√°c h∆°n
        local currentTime = os.time() -- L·∫•y th·ªùi gian th·ª±c t·ª´ VPS
        local currentDate = os.date("*t", currentTime)
        local currentHour = currentDate.hour
        local currentMinute = currentDate.min
        local currentSecond = currentDate.sec

        -- Ki·ªÉm tra c√°c m·ªëc th√¥ng b√°o ƒë·∫øm ng∆∞·ª£c (50, 55, 57, 58, 59)
        local notifyMinute = nil
        local notifyMessage = nil
        if currentMinute == 50 then
            notifyMinute = 50
            notifyMessage = "X·ªï s·ªë s·∫Ω di·ªÖn ra sau 10 ph√∫t!"
        elseif currentMinute == 55 then
            notifyMinute = 55
            notifyMessage = "C√≤n 5 ph√∫t ƒë·∫øn gi·ªù quay s·ªë!"
        elseif currentMinute == 57 then
            notifyMinute = 57
            notifyMessage = "C√≤n 3 ph√∫t ƒë·∫øn gi·ªù quay s·ªë!"
        elseif currentMinute == 58 then
            notifyMinute = 58
            notifyMessage = "C√≤n 2 ph√∫t ƒë·∫øn gi·ªù quay s·ªë!"
        elseif currentMinute == 59 then
            notifyMinute = 59
            notifyMessage = "C√≤n 1 ph√∫t ƒë·∫øn gi·ªù quay s·ªë!"
        end

        if notifyMinute and currentSecond == 0 and not notifiedMinutes[currentHour .. ":" .. notifyMinute] then
            TriggerClientEvent('lottery:reminder', -1, notifyMessage)
            lib.notify(-1, {
                title = "X·ªï s·ªë",
                description = notifyMessage,
                type = "info",
                position = "center-left",
                duration = Config.NotifyDuration
            })
            LogActivity("Th√¥ng b√°o: " .. notifyMessage .. " l√∫c " .. os.date("%H:%M:%S", currentTime))
            notifiedMinutes[currentHour .. ":" .. notifyMinute] = true
        end

        -- Ki·ªÉm tra quay s·ªë l√∫c ph√∫t = 00, gi√¢y = 00
        if currentMinute == 0 and currentSecond == 0 and currentHour ~= lastDrawHour then
            local winningNumber = math.random(0, 99)
            local formattedNumber = string.format("%02d", winningNumber)
            DrawLottery(formattedNumber, currentTime)
            lastDrawTime = currentTime
            lastDrawHour = currentHour
            SaveState(lastDrawTime)
            LogActivity("Quay s·ªë k·∫øt qu·∫£: " .. formattedNumber .. " - T·ªïng gi·∫£i th∆∞·ªüng: " .. totalPool .. "$ l√∫c " .. os.date("%H:%M:%S", currentTime))
            -- Reset tr·∫°ng th√°i th√¥ng b√°o cho gi·ªù m·ªõi
            notifiedMinutes = {}
        end
    end
end)

-- Quay s·ªë v√† chia th∆∞·ªüng
function DrawLottery(winningNumber, drawTime)
    local tickets = MySQL.query.await('SELECT identifier, number FROM lottery_tickets')
    local winners = {}
    local ticketCount = 0
    for _, ticket in ipairs(tickets) do
        ticketCount = ticketCount + 1
        if ticket.number == winningNumber then
            local xPlayer = ESX.GetPlayerFromIdentifier(ticket.identifier)
            if xPlayer then
                winners[#winners + 1] = xPlayer.source
            end
        end
    end

    local prizePool = totalPool + (ticketCount * Config.BonusPerTicket)
    totalPool = 0
    MySQL.query('TRUNCATE TABLE lottery_tickets')

    if #winners > 0 then
        local prizePerWinner = math.floor(prizePool / #winners)
        local taxedPrize = math.floor(prizePerWinner * (1 - Config.TaxRate))

        for _, winnerSrc in ipairs(winners) do
            local xPlayer = ESX.GetPlayerFromId(winnerSrc)
            if xPlayer then
                xPlayer.addAccountMoney('bank', taxedPrize)
                TriggerClientEvent('lottery:winPrize', winnerSrc, taxedPrize)
                LogActivity("Ng∆∞·ªùi ch∆°i " .. xPlayer.getName() .. " (ID: " .. winnerSrc .. ") tr√∫ng th∆∞·ªüng: " .. taxedPrize .. "$ (s·ªë: " .. winningNumber .. ")")
                SendPlayerActionToDiscord(xPlayer.getName(), winnerSrc, "Tr√∫ng th∆∞·ªüng " .. taxedPrize .. "$ (S·ªë: " .. winningNumber .. ")")
            end
        end
    else
        totalPool = math.floor(prizePool * Config.JackpotCarryover)
    end

    TriggerClientEvent('lottery:drawResult', -1, winningNumber, prizePool)
    SendResultToDiscord(winningNumber, prizePool, #winners, drawTime, totalPool)
end

-- L·ªánh admin ƒë·ªÉ quay s·ªë th·ª≠ nghi·ªám
RegisterCommand('lottery_draw_test', function(source, args)
    if source == 0 or isAdmin(source) then
        local currentTime = os.time()
        local currentDate = os.date("*t", currentTime)
        local currentHour = currentDate.hour
        local timeSinceLastDraw = lastDrawTime == 0 and math.huge or (currentTime - lastDrawTime)
        if timeSinceLastDraw >= 3600 then -- 1 gi·ªù
            local winningNumber = math.random(0, 99)
            local formattedNumber = string.format("%02d", winningNumber)
            DrawLottery(formattedNumber, currentTime)
            lastDrawTime = currentTime
            SaveState(lastDrawTime)
            if source ~= 0 then
                lib.notify(source, {
                    title = "X·ªï s·ªë",
                    description = "ƒê√£ quay s·ªë th·ª≠ nghi·ªám: " .. formattedNumber,
                    type = "success",
                    position = "center-left",
                    duration = Config.NotifyDuration
                })
            else
                print("ƒê√£ quay s·ªë th·ª≠ nghi·ªám t·ª´ console: " .. formattedNumber)
            end
        else
            local timeRemaining = 3600 - (timeSinceLastDraw % 3600)
            if source ~= 0 then
                lib.notify(source, {
                    title = "X·ªï s·ªë",
                    description = "Ch∆∞a ƒë·ªß 60 ph√∫t! C√≤n " .. math.floor(timeRemaining / 60) .. " ph√∫t.",
                    type = "error",
                    position = "center-left",
                    duration = Config.NotifyDuration
                })
            else
                print("Ch∆∞a ƒë·ªß 60 ph√∫t! C√≤n " .. math.floor(timeRemaining / 60) .. " ph√∫t.")
            end
        end
    else
        lib.notify(source, {
            title = "X·ªï s·ªë",
            description = "B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y!",
            type = "error",
            position = "center-left",
            duration = Config.NotifyDuration
        })
    end
end, false)

-- L·ªánh admin quay s·ªë b·∫•t k·ª≥ l√∫c n√†o
RegisterCommand('lottery_draw', function(source, args)
    if source == 0 or isAdmin(source) then
        local currentTime = os.time()
        local winningNumber = math.random(0, 99)
        local formattedNumber = string.format("%02d", winningNumber)
        DrawLottery(formattedNumber, currentTime)
        lastDrawTime = currentTime
        SaveState(lastDrawTime)
        if source ~= 0 then
            lib.notify(source, {
                title = "X·ªï s·ªë",
                description = "ƒê√£ quay s·ªë th·ªß c√¥ng: " .. formattedNumber,
                type = "success",
                position = "center-left",
                duration = Config.NotifyDuration
            })
        else
            print("ƒê√£ quay s·ªë th·ªß c√¥ng t·ª´ console: " .. formattedNumber)
        end
    else
        lib.notify(source, {
            title = "X·ªï s·ªë",
            description = "B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y!",
            type = "error",
            position = "center-left",
            duration = Config.NotifyDuration
        })
    end
end, false)